/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dcnproject;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

/**
 *
 * @author Abduulah Jan
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    
    static ServerSocket server;
    static Socket client;
    static DataInputStream din;
    static DataOutputStream dout;
    
    static ArrayList<clientHandel> clients = new ArrayList<>();
    
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clientInfo.setColumns(20);
        clientInfo.setRows(5);
        jScrollPane1.setViewportView(clientInfo);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Server().setVisible(true);
            }
        });
        try {
            server = new ServerSocket(1812);
            int i=1;
            while (true){
                client = server.accept();
                String name = "Team "+i;
//                name = JOptionPane.showInputDialog("Enter Name To Continue");
                din = new DataInputStream(client.getInputStream());
                dout = new DataOutputStream(client.getOutputStream());
                dout.writeUTF("Name : "+name);
                clientInfo.setText(clientInfo.getText().trim()+"\n New Client Connected: "+client);
                clientHandel ch = new clientHandel(client, name, din, dout);
                clients.add(ch);
                ch.firstRun();
                Thread thread = new Thread(ch);
                System.out.println("Thread Created");
                thread.start();
                i++;
            }
        } catch (IOException ex) {
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea clientInfo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

class clientHandel implements Runnable{
    private final String name; 
    final DataInputStream din; 
    final DataOutputStream dout; 
    Socket s; 
    static int count=0;
    static boolean round2 = false;
    public clientHandel(Socket s, String name, DataInputStream dis, DataOutputStream dos) { 
        this.din = dis;
        this.dout = dos;
        this.name = name;
        this.s = s;
    }

    @Override
    public void run() {
        String msg;
        while (true){
            try{
                msg = din.readUTF();
                try{
                    int temp = Integer.parseInt(msg);  
                }
                catch(NumberFormatException ex){
                    for (clientHandel client : Server.clients){
                        client.dout.writeUTF(msg);
                        System.out.println(this.name+": "+msg);
                    }
                    count++;
                    if (count%5==0){
                        int temp = (int) count / 5;
                        try{
                            Server.clients.get(temp).dout.writeUTF("true");                            
                            for (int i=0; i<Server.clients.size(); i++){
                                if (i==temp){
                                    continue;
                                }
                                Server.clients.get(i).dout.writeUTF("false");
                            }
                        }catch (IndexOutOfBoundsException e){
                            round2 = true;
                            for (clientHandel client : Server.clients){
                                client.dout.writeUTF("false");
                            }
                        }
                    }
                }
            }
            catch(IOException ex){
            }
        }
    }
    public void firstRun(){
        System.out.println(count);
        if (count==0){
            try{
                Server.clients.get(0).dout.writeUTF("true");        
            }catch(IOException ex){
            }
        }
        
    }
    
}